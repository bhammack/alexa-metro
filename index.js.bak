//const MQTT_URL = 'mqtt://broker.hivemq.com'
const MQTT_URL = 'mqtt://192.168.1.11'


const mqtt = require('async-mqtt')
const metro = require('./metro')


const client =  mqtt.connect(MQTT_URL, {
    username: 'metro-mqtt-svc',
    password: '#Metro0mqtt'
})
console.log('connecting...');
client.on('connect', function () {
    console.log('connected!')
})




// metro.getRailStations().then(res => {
//     console.log(res.data);
// })


// console.log('Building station map...')
// metro.getRailStations().then(res => {
//     //console.log(res.data)
//     stationMap = {}
//     res.data.Stations.forEach(element => {
//         stationMap[element.Name] = element.Code
//     })
//     console.log(stationMap)
// })

// Next train arrival for one or more stations. 

function publishRailPredictions() {
    metro.getRailPredictions().then(res => {
        let trains = res.data.Trains;
    
        // Transpose the list of trains into a list by next stop id.
        let nextStop = {}
        trains.forEach(element => {
            if (element.LocationCode in nextStop) {
                nextStop[element.LocationCode].push(element);
            } else {
                nextStop[element.LocationCode] = [element];
            }
        })
        console.log(`Publishing rail predictions for ${Object.keys(nextStop).length} stations`)

        for (let station in nextStop) {
            let prediction = {
                time: new Date().toLocaleString(),
                trains: nextStop[station].sort((a, b) => {
                    (a.Min > b.Min) ? 1 : -1
                })
            }
            client.publish('metro/predictions/rail/' + station, JSON.stringify(prediction))
        }
    })
}


function publishBusPredictions(stopId = '') {
    metro.getBusPredicitions().then(res => {
        let buses = res.data.Predictions;


    })
}


// Call the rail predictions api every 20 seconds.
setInterval(publishRailPredictions, 20 * 1000)
//setInterval(publishBusPredictions, 20 * 1000)

